name: WorkProfile CI/CD

on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - main

jobs:
  # -------------------------
  # Stage 1: Validation
  # -------------------------
  validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Validate required files
        run: |
          test -f Dockerfile && echo "✓ Dockerfile exists"
          test -f requirements.txt && echo "✓ requirements.txt exists"
          test -f app.py && echo "✓ app.py exists"

      - name: Validate Python packages
        run: |
          python3 -c "import flask; print('✓ Flask import successful')"
          python3 -c "import mysql.connector; print('✓ MySQL connector import successful')"

  # -------------------------
  # Stage 2: Build & Single Container Test
  # -------------------------
  build-test-publish:
    needs: validation
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/workprofile-app
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Build Docker image with tags
        run: docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$IMAGE_TAG .

      - name: Run container in detached mode
        run: docker run -d -p 8080:5000 --name workprofile_test $IMAGE_NAME:latest

      - name: Wait for container to start
        run: sleep 10

      - name: Test root endpoint
        run: curl -f http://localhost:8080/

      - name: Test health endpoint
        run: curl -f http://localhost:8080/health

      - name: Stop and remove test container
        run: |
          docker stop workprofile_test
          docker rm workprofile_test

      - name: Push Docker images to GitHub Container Registry
        if: success()
        run: |
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$IMAGE_TAG

  # -------------------------
  # Stage 3: 3-Tier Docker Compose Test
  # -------------------------
  stage3-docker-compose:
   needs: build-test-publish
   runs-on: ubuntu-latest
   steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Start 3-tier stack
      run: |
        cd docker-compose
        docker compose up -d
        echo "Waiting for services to start..."
        sleep 60


    - name: Wait for app
      run: |
        for i in {1..30}; do
          nc -z localhost 8081 && break
          echo "Waiting for app to start..."
          sleep 2
        done

    - name: Test root endpoint
      run: curl -f http://localhost:8081/
        
    - name: Test health endpoint
      run: curl -f http://localhost:8081/health

    - name: Test database connectivity
      run: curl -s http://localhost:8081/health 

    - name: Test database connectivity
      run: |
        echo "Checking database connectivity..."
        for i in {1..30}; do
          STATUS=$(curl -s http://localhost:8081/health | grep "Database: Healthy" || true)
          if [ "$STATUS" != "" ]; then
            echo "✓ Database connectivity works"
            break
          fi
          echo "Waiting for database..."
          sleep 5
        done
        if [ "$STATUS" = "" ]; then
          echo "✗ Database connectivity failed"
          exit 1
        fi
    - name: Shutdown 3-tier stack
      run: |
        cd docker-compose
        docker compose down -v

  stage4-publish:   # ← שם ה-job, יוצג כ-"Stage 4: Publish"
   needs: stage3-docker-compose
   runs-on: ubuntu-latest
   steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.CR_PAT }}




    - name: Publish
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/workprofile:latest
          ghcr.io/${{ github.repository_owner }}/workprofile:${{ github.sha }}

